#Example configuration file for mqtt_topic_exporter

############################################################
# Section describing MQTT broker connection information
# At minimum should provide host address
[mqtt]

# broker address, doesn't have default value:
host = 127.0.0.1

# broker port (default 1883):
# port = 1883

# MQTT keepalive setting:
# keepalive = 60

# credentials, used in connection
# if both ommited, no authentification is used,
# if only password provided, it will be ignored,
# if only login provided, it will be used with no password:

# username: mqtt-exporter
# password:

# client_id should be unique among all broker clients
# (if ommited will be generated based on NIC id):
# client_id: mqtt-exporter-1

# loglevel for paho library, used to debug issues with broker,
# uses values from logging module (DEBUG, INFO, WARNING, ERROR):
# loglevel = INFO


############################################################
# Section describing Prometheus exporter web-server
# Can be ommited if there is no need to change defaults
[exporter]

# local machine interface exporter web-server should listen on
# (0.0.0.0 or empty value to make it avaliable on all interfaces,
# 127.0.0.1 or localhost to only accept local connections):
# bind_address = 0.0.0.0

# web-server port (default 8842):
# port = 8842

# url to access metrics, should start with leading slash:
# metrics_path = /metrics

# path to exporter web-server logs in access.log-like format:
# log_path = exporter.log


############################################################
# Rest of sections describe rules, used to exctract labels and
# values from MQTT topics, and can have arbitrary names.

[example section 1: options description]
# topic that will be subscribed and processed in this section:
topic = main_prefix/+/#

# static parts of Prometheus metric:

# changing metric name based on payload is not supported
metric_name = mqtt_metrics
# metric type, default is GAUGE
metric_type = GAUGE
# metric description, can be left empty or ommited
metric_help =

# extraction of labels and value from mqtt topic and payload:

# before processing topic and payload are concatenated using
# topic_payload_separator (default is a single space character)
# topic_payload_separator =  

# regular expression describing combined string
# [topic][topic_payload_separator][payload]. Groups are used
# to fill metric labels and value. If string doesn't match
# expression it will be silently ignored
topic_payload_pattern: ^main_prefix/(.+) (.+)$

# labels template is a single string combining all labels
# for given metric (everything inside {}). Uses match groups
# from topic_payload_pattern for dinamic labels
labels_template = source="mqtt", topic="\1"

# can also take value from match group or be static. Should
# however always be valid float, ignored otherwise
value_template = \2

# normally mqtt-topic-exporter keeps last message on given
# topic in memory to serve as metric. This option allows to
# exclude it from generated metrics if last message on topic
# was more than no_activity_timeout seconds ago
no_activity_timeout = 180


[example section 2: single topic]
# [topic-payload pair] main_prefix/device_name/value 12.3
# [corresponding metric] mqtt_metrics {device="device_name"} = 12.3
metric_name = mqtt_metrics
metric_type = GAUGE
topic = main_prefix/device_name/value
topic_payload_pattern = main_prefix/(.+)/value (.+)
labels_template = device="\1"
value_template = \2


[example section 3: every topic with numeric payload]
# [topic-payload pair] main_prefix/device_name/value 12.3
# [corresponding metric] mqtt_metrics {topic="main_prefix/device_name/value"} = 12.3
metric_name = mqtt_metrics
metric_type = GAUGE
topic = #
topic_payload_pattern = (.+) (.+)
labels_template = topic="\1"
value_template = \2
